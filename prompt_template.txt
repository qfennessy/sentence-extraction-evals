You will extract structured information about family members and relationships from a sentence. Focus only on family-related information, not all biographical details.

Here is the sentence:
{SENTENCE}

Extract all family relationships mentioned in the sentence, and output a JSON object with the following structure:
{
  "family_members": [
    {
      "name": "person's name (use actual name if provided, a descriptive placeholder if unnamed)",
      "age": "age if mentioned, otherwise null",
      "gender": "female/male if known or can be inferred, otherwise null",
      "occupation": "occupation if mentioned, otherwise null",
      "relation_to": [
        {
          "name": "related person's name or descriptor (e.g., 'narrator', 'speaker' for first-person references)",
          "relationship": "how they are related (e.g., 'son', 'daughter', 'brother', 'sister', 'mother', etc.)"
        }
      ]
    }
  ]
}

IMPORTANT GUIDELINES:

1. Names and Identifiers:
   - For first-person narrators, always use "narrator" as the name
   - For unnamed family members, use clear descriptive identifiers (e.g., "father", "mother", "grandmother")
   - When multiple unnamed children are mentioned (e.g., "seven children"), name them "child1", "child2", etc.
   - For deceased family members, still create entries as they are part of the family structure

2. Relationship Chains and Family Structure:
   - When extracting from first-person perspective ("my father"), create entries for all parties
   - For multi-step relationships ("my wife's parents"), create entries for all people in the chain
   - Always include reciprocal relationships (if A is parent to B, B is child to A)
   - For married couples, ensure both husband-wife relationships are captured
   - For maternal/paternal relatives, include the relevant parent in the relationship chain
   - When someone has multiple relationships (e.g., "brother-in-law"), capture all relations

3. Special Relationship Types:
   - Use "twin" specifically for twins (either identical or fraternal)
   - Use "adoptive" prefix for adoption relationships (e.g., "adoptive mother", "adoptive son")
   - Use "half-brother"/"half-sister" for half-siblings
   - Use "stepfather"/"stepmother" for step-relationships
   - Use "-in-law" suffix for in-law relationships (mother-in-law, brother-in-law, etc.)
   - For nieces/nephews, use "niece"/"nephew" when gender is known, "niece/nephew" when not
   - For aunts/uncles, use "aunt"/"uncle" when gender is known, "aunt/uncle" when not
   - For godparents, use "godfather"/"godmother" and "godchild" relationships
   - For other special relations like "alias" (for a person using another identity), include this
   
4. Age and Gender:
   - Only include current age when explicitly mentioned (e.g., "is 92 years old", "now 10")
   - Don't include past ages (e.g., "when he was 6") unless it's their current age
   - Infer gender from relationships and pronouns when possible
   - Use gender-appropriate relationship terms (brother/sister, husband/wife)
   - Use gender-neutral terms (child, sibling, spouse) when gender is unknown

5. Complex Family Structures:
   - For blended families, ensure step-relationships and biological relationships are both captured
   - For same-sex couples, correctly represent the spousal relationship
   - For adoptive families, use "adoptive" prefix for relationships
   - Handle extended family (great-grandparents, cousins, etc.) appropriately
   - Maintain sibling relationships between all siblings/step-siblings/half-siblings
   - For multi-generational families, ensure all relationships are properly connected

Example 1 (First-person perspective):
For the sentence "My father David worked as a mechanic in Chicago for 35 years", the output would be:
{
  "family_members": [
    {
      "name": "David",
      "age": null,
      "gender": "male",
      "occupation": "mechanic",
      "relation_to": [
        {
          "name": "narrator",
          "relationship": "father"
        }
      ]
    },
    {
      "name": "narrator",
      "age": null,
      "gender": null,
      "occupation": null,
      "relation_to": [
        {
          "name": "David", 
          "relationship": "child"
        }
      ]
    }
  ]
}

Example 2 (Complex family structure):
For the sentence "My wife's parents, Robert and Janice, emigrated from Scotland in 1975 with her younger brother Thomas", the output would be:
{
  "family_members": [
    {
      "name": "Robert",
      "age": null,
      "gender": "male",
      "occupation": null,
      "relation_to": [
        {
          "name": "Janice",
          "relationship": "husband"
        },
        {
          "name": "wife",
          "relationship": "father"
        },
        {
          "name": "Thomas",
          "relationship": "father"
        }
      ]
    },
    {
      "name": "Janice",
      "age": null,
      "gender": "female",
      "occupation": null,
      "relation_to": [
        {
          "name": "Robert",
          "relationship": "wife"
        },
        {
          "name": "wife",
          "relationship": "mother"
        },
        {
          "name": "Thomas",
          "relationship": "mother"
        }
      ]
    },
    {
      "name": "wife",
      "age": null,
      "gender": "female",
      "occupation": null,
      "relation_to": [
        {
          "name": "Robert",
          "relationship": "daughter"
        },
        {
          "name": "Janice",
          "relationship": "daughter"
        },
        {
          "name": "narrator",
          "relationship": "wife"
        },
        {
          "name": "Thomas",
          "relationship": "sister"
        }
      ]
    },
    {
      "name": "Thomas",
      "age": null,
      "gender": "male",
      "occupation": null,
      "relation_to": [
        {
          "name": "Robert",
          "relationship": "son"
        },
        {
          "name": "Janice",
          "relationship": "son"
        },
        {
          "name": "wife",
          "relationship": "brother"
        }
      ]
    },
    {
      "name": "narrator",
      "age": null,
      "gender": null,
      "occupation": null,
      "relation_to": [
        {
          "name": "wife",
          "relationship": "husband"
        },
        {
          "name": "Robert",
          "relationship": "son-in-law"
        },
        {
          "name": "Janice",
          "relationship": "son-in-law"
        }
      ]
    }
  ]
}

Only return the JSON object, with no other text.