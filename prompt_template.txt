You will extract structured information about family members and relationships from a sentence. Focus only on family-related information, not all biographical details.

Here is the sentence:
{SENTENCE}

Extract all family relationships mentioned in the sentence, and output a JSON object with the following structure:
{
  "family_members": [
    {
      "name": "person's name (use actual name if provided, a descriptive placeholder if unnamed)",
      "age": "age if mentioned, otherwise null",
      "gender": "female/male if known or can be inferred, otherwise null",
      "occupation": "occupation if mentioned, otherwise null",
      "relation_to": [
        {
          "name": "related person's name or descriptor (e.g., 'narrator', 'speaker' for first-person references)",
          "relationship": "how they are related (e.g., 'son', 'daughter', 'brother', 'sister', 'mother', etc.)"
        }
      ]
    }
  ]
}

IMPORTANT GUIDELINES:

1. For first-person narrators, use "narrator" or "speaker" as the name
2. When extracting relationships from first-person perspective:
   - For "my father" → create an entry for father related to "narrator"
   - For "my wife's mother" → create entries for all three people in this relationship chain
3. For unnamed people, use descriptive placeholders like "narrator", "father", "mother-in-law"
4. Handle special relationships correctly:
   - Use "twin" specifically when twins are mentioned
   - Use "half-brother/half-sister" for half-siblings
   - Use "stepfather/stepmother" for step-relationships
   - Use appropriate in-law relationships (father-in-law, sister-in-law, etc.)
5. Only create entries for family members actually mentioned in the text:
   - If "grandmother" is mentioned without specific grandchildren, only create an entry for the grandmother
   - Don't create entries for children unless they're specifically mentioned
6. For multiple siblings/children:
   - Only create separate entries if individuals are named or specifically counted
   - For "seven children" without names, create a single entry for each child with appropriate numbering
7. Complete relationship chains - make sure relationships work in both directions:
   - If A is parent to B, B should be child to A
   - If A is husband to B, B should be wife to A
8. Properly handle gender-specific relationships:
   - Ensure brother/sister, husband/wife, etc. match the gender when inferrable
   - Use "spouse" or "sibling" only when gender cannot be determined

Example 1:
For the sentence "John's sister Mary is a 30-year-old doctor with two kids", the output would be:
{
  "family_members": [
    {
      "name": "Mary",
      "age": "30",
      "gender": "female",
      "occupation": "doctor",
      "relation_to": [
        {
          "name": "John",
          "relationship": "sister"
        }
      ]
    },
    {
      "name": "John",
      "age": null,
      "gender": "male",
      "occupation": null,
      "relation_to": [
        {
          "name": "Mary",
          "relationship": "brother"
        }
      ]
    }
  ]
}

Example 2:
For the sentence "My father David worked as a mechanic in Chicago for 35 years", the output would be:
{
  "family_members": [
    {
      "name": "David",
      "age": null,
      "gender": "male",
      "occupation": "mechanic",
      "relation_to": [
        {
          "name": "narrator",
          "relationship": "father"
        }
      ]
    },
    {
      "name": "narrator",
      "age": null,
      "gender": null,
      "occupation": null,
      "relation_to": [
        {
          "name": "David", 
          "relationship": "child"
        }
      ]
    }
  ]
}

Example 3:
For the sentence "My wife's parents, Robert and Janice, emigrated from Scotland in 1975", the output would be:
{
  "family_members": [
    {
      "name": "Robert",
      "age": null,
      "gender": "male",
      "occupation": null,
      "relation_to": [
        {
          "name": "Janice",
          "relationship": "husband"
        },
        {
          "name": "wife",
          "relationship": "father"
        }
      ]
    },
    {
      "name": "Janice",
      "age": null,
      "gender": "female",
      "occupation": null,
      "relation_to": [
        {
          "name": "Robert",
          "relationship": "wife"
        },
        {
          "name": "wife",
          "relationship": "mother"
        }
      ]
    },
    {
      "name": "wife",
      "age": null,
      "gender": "female",
      "occupation": null,
      "relation_to": [
        {
          "name": "Robert",
          "relationship": "daughter"
        },
        {
          "name": "Janice",
          "relationship": "daughter"
        },
        {
          "name": "narrator",
          "relationship": "wife"
        }
      ]
    },
    {
      "name": "narrator",
      "age": null,
      "gender": null,
      "occupation": null,
      "relation_to": [
        {
          "name": "wife",
          "relationship": "husband"
        }
      ]
    }
  ]
}

Only return the JSON object, with no other text.